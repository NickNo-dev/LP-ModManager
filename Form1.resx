<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZGQAUFBQCEBAQLBERERYCAgIABgYGaQgI
        CJ83NzcDExMTHAUFBb8KCgo4BwcHAAkJCS4NDQ0rAAAAAFlZWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCwsADCwsIAAAAAABcXFwkGBgafCgoKaxoa
        Gg8HBwdvBgYGwQ4ODkcLCwtUBQUFygsLC1UXFxcUBwcHlwgICHcAAAAAJycnAywsLAQqKioAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAREREAEBAQDQkJCXcTExMsHR0dCggI
        CIsGBga/EBAQUgwMDF4GBga4Dw8POAoKCkoFBQW6Dw8PTQ0NDVwFBQXMCwsLcSIiIgkNDQ1XCAgIdjY2
        NgIsLCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAATExMKBwcHmAgI
        CLIRERFWDw8PTgYGBrUNDQ0tDg4OHg4NDqETExQjDQ0ONwsLDJwUFBQPCQkJRwcHB6sPDw9ADg4OXwYG
        BsgKCgptAAAAAGFhYQFjY2MAZmZmAAAAAAAAAAAAAAAAAAAAAAAAAAAALy8vAAAAAAAJCQlCCwsLPSAg
        IBEQEBBjBAQEwAcHB1ccHBwFCwoNewgGDW0KCQtLERUKqRolCYsYIgiSERUKpQsKDUcIBQ17DgwQaTg5
        NwMGBgZ3BQUFrhEREVgcHBwXCgoKbAoKCkICAgIA0tLSAAAAAAAAAAAAAAAAAAAAAAArKysA////AAgI
        CGwFBQXHCwsLfBwcHCsJCQlQCAcJlggFDUYdKgeePWIE4GCdAu9yvQH7es0B/XrNAf1yvQH7YJ0C8D1i
        BOEfLQiYBwULUQkJCpoLDAs3ExMTLggICJQFBQXHCAgIPQAAAADU1NQAAAAAAAAAAAAAAAAAJSUlAC0t
        LQPs7OwAFxcXGQgICJQDAwO6CwsLPQQAEBoUGwinR3MD6XzPAfyU+QD/mP8A/5j/AP+Y/wD/mP8A/5j/
        AP+Y/wD/lPkA/3zPAf1HcgPqFBsHoAQAEhYJCQhYAwMDugsLC3wfHx8SFhYWCxYWFg0LCwsAlJSUACgo
        KAArKysDCAgIdwoKCm0PDw9YEhISLggICFgHBgqTIjMGrWqvAfWU+QD/mP8A/5b/AP+W/wD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/mP8A/5T5AP9rsAH0IDEFsgYECZMICAg+GhoaLBAQEGMHBweYCQkJdwAA
        AABcXFwAKSkpACgoKAMLCwtYBgYGyAUFBa8NDQ02AAAPFyAwBbNyvQH9mP8A/5b/AP+W/wD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5j/AP9yvQH9ITIFrQEADxkLCwtQBAQEwQgI
        CLIPDw8sAAAAAFtbWwDNzc0AAAAAABQUFAwRERFfBgYGdgoJC5oTGwagaq8B9Zj/AP+W/wD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5j/AP9qrwH2ExoHpwgH
        CZYGBgZXEhISVh4eHgshISEKHx8fAgsLCysICAh3CgoKcA8PD0BqZm8BBQIKUUZyAuqU+QD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5T5
        AP9GcgLpBAEKRlFPUgIQEBBOCgoKiwcHB58QEBAsCAgILgYGBpcEBATMBgYGqwwLDmgdKwaYfM4B/Zj/
        AP+U/AD/k/oA/5P6AP+T+QD/kfYA/5H1AP+R9QD/k/kA/5T8AP+T+gD/k/oA/5P6AP+W/gD/lv8A/5b/
        AP+W/wD/mP8A/3zOAf0dKgeeDAsOegYGBrYFBQW/CQkJaxAQEBQODg4ADg4OFw0NDVwICAhHBgMLezxh
        A+GT+AD/lv8A/1mVBf8xTgj/MlAI/zpeB/9howT/ZqoE/2OlBP94ygL/XZwE/zFOCP8yUAj/P2YH/4vq
        Af+Y/wD/l/8A/5b/AP+W/wD/k/gA/z1hA+EFAQttCQkJLBAQEFMVFRUUFhYWAAsLCzYMDAxVDw8PTR4e
        HwsIBgpHX5wC8Jj/AP+W/wD/QGgH/wYDC/8HBQv/HSsK/4bjAf+U/AD/k/kA/5X9AP9Gcgb/BgML/wgG
        C/8WHgr/Y6YE/3C8A/980gL/k/kA/5b/AP+Y/wD/YJ0C7wsJDUoSEhMbDg4OXgkJCW8ICAhoBgYGvwUF
        BcsFBQW6CwsLmxEVCaVyvQH7mP8A/5b/AP9Bagf/CQcL/woJC/8gLwn/iOcB/5f/AP+W/wD/l/8A/0d1
        Bv8JBwv/CgkL/xwqCv94ygL/hN8B/2+7A/9orgT/kvgA/5j/AP9yvQH7ERUKqQwMDKAFBQW4BgYGwQcH
        B58QEBAaCgoKVAsLC0oKCAwzFiAFknrNAf2Y/wD/l/8A/0NuB/8JBwv/CgkL/x8vCf+I5wH/l/8A/5b/
        AP+X/wD/R3UG/wkHC/8KCQv/IDAJ/4nnAf+Y/wD/mP8A/3G/A/94ygL/mf8A/3rNAf4ZJAiLCQYOHwwM
        DDgMDAxHJiYmAj4+PgINDQ1HEBAQOA8MFB8WIQWLes0B/pj/AP+X/wD/R3UG/wkHC/8KCQv/ITEJ/4np
        Af+X/wD/lv8A/5f/AP9JeQb/CQcL/woJC/8gMAn/iOcB/5f/AP+X/wD/iOYB/2mxBP+Y/wD/es0B/Rkj
        CZIPDRIzDQ0NSgsLC1QVFRUaCAgInwYGBsEGBga4DAwNoBAUCalyvQH7mP8A/5f/AP9HdQb/CQcL/woJ
        C/8gMQn/iegB/5f/AP+W/wD/l/8A/0d2Bv8JBwv/CgkL/x4sCv+H5QH/l/8A/5f/AP+F4AH/a7QD/5n/
        AP9yvQH7ERUKpQoKC5sFBQW6BQUFywYGBr8HBwdoBwcHbwwMDF4PDw8bBwUJSl+cAu+Y/wD/l/8A/0Vx
        Bv8JBwv/CggL/x8vCf+I5wH/l/8A/5b/AP+X/wD/R3QG/wkHC/8KCQv/HCgK/4fiAf+Z/wD/k/kA/2iu
        BP+A2AL/mf8A/1+dAvAKCQxHERESCw0NDU0KCgpVCAgINhISEgAREREUEhISUw4ODiwHAwxtPGED4ZP4
        AP+X/wD/Q20H/wsLC/8MDQv/IDAJ/4flAf+X/wD/lv8A/5f/AP9Idwb/CwsL/w0OC/8bJwr/broD/3bI
        A/9lqQT/dcUD/5b+AP+T+QD/PWIE4QgFDXsMDAxHDw8PXA8PDxcPDw8ADg4OFAgICGsGBga/BQUFtgoI
        C3obKQWefM4B/Zj/AP980gL/a7MD/2u0A/9xvgP/kfYA/5b/AP+W/wD/lv8A/37VAv9rtAP/a7UD/223
        A/92yAP/fdQC/4vsAf+X/gD/mP8A/3zOAf0dKwaYCwkNaAUFBasFBQXMBwcHlwsLCy4KCgosBgYGnwgI
        CIsQEBBOSUdKAgUCC0ZGcgLplPkA/5j/AP+Y/wD/mP8A/5j/AP+W/wD/lv8A/5b/AP+W/wD/l/8A/5j/
        AP+Y/wD/mP8A/5j/AP+X/wD/l/8A/5b/AP+U+QD/RnIC6gYDClJ9eYIBDw8PQAkJCXEHBwd3CwsLKxIS
        EgIVFRUKFBQUCxMTE1YJCQlXCAgKlhIZB6dqrwH2mP8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/mP8A/2qvAfUSGgWgCgkLmggICHYRERFfGRkZDAAA
        AACQkJAAQUFBAAAAAAAPDw8sBwcHsgQEBMEICAhQAAANGSEyBa1yvQH9mP8A/5b/AP+W/wD/lv8A/5b/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5j/AP9yvQH9IDAFswAADRcKCgo2BAQErwcH
        B8gPDw9XLy8vAzExMQBBQUEAAAAAAAcHB3cHBweYDQ0NYxsbGywKCgo+BwUKkx8wBLJqrwH0lPkA/5j/
        AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5b/AP+W/wD/lv8A/5j/AP+U+QD/aq8B9SEyBa0HBgqTCQkIWRQU
        FC4ODg5YBwcHbQcHB3Y1NTUDMDAwAISEhAAFBQUADg4ODRAQEAsaGhoSDAwMfAMDA7oHBwdYAAANFhMa
        BqBGcgLqfM8B/ZT5AP+Y/wD/mP8A/5j/AP+Y/wD/mP8A/5j/AP+U+QD/fM8B/EdyA+kTGgenAgANGggI
        CD0DAwO6CQkJlBsbGxlUVFQAHx8fAx0dHQAAAAAAAAAAAAAAAAC8vLwABAQEAAoKCj0GBgbHCAgIlBUV
        FS4KCwo3CgkLmgUECVEdKwaYPWED4V+cAvByvQH7es0B/XrNAf1yvQH7X50C7z1hA+AdKgaeBQQKRggI
        CpYJCQlQGxsbKgsLC3wFBQXHDAwMbP///wA+Pj4AAAAAAAAAAAAAAAAAAAAAALq6ugAAAAAABwcHQgoK
        CmwZGRkXEBAQWAUFBa4GBgZ2LC0rAwwLDmkJBg17CAcJRxEVCaUXIQeSFiEFixEVCqkICAlLBgQLbQwL
        DnssLCwFCAgIVwQEBMARERFjHh4eEQYGBj0ICAhCAAAAAERERAAAAAAAAAAAAAAAAAAAAAAAAAAAADU1
        NQA1NTUANzc3AQAAAAAJCQltBgYGyA8PD18PDw9ABgYGqwwMDEcODg4PDAwMnBMSFDcODQ8jDQwNoRIS
        Eh4KCgotBgYGtRAQEE4RERFWBwcHsgkJCZgdHR0KGBgYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAmJiYALi4uAgcHB3YMDAxXGBgYCQoKCnEFBQXMDQ0NXAwMDE0FBQW6Dw8PSg4O
        DjgGBga4Dw8PXhAQEFIFBQW/CQkJix0dHQoMDAwsBwcHdxMTEw0UFBQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQAICAgBCEhIQMAAAAABwcHdwcHB5cQEBAUCgoKVQUF
        BcoLCwtUCwsLRwUFBcEICAhvExMTDwcHB2sGBgafJCQkCQUFBQCQkJAAb29vAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQUFBAAAAAAAICAgrBwcHLgQE
        BAAICAg4BgYGvxQUFBwZGRkDBgYGnwgICGkAAAAACwsLFgoKCiwaGhoCHR0dAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4gT//+AAn/8AAA//AAAX/AAAA/wAAAP0AAAA4AAAAOAAAADwAAAAAAA
        AAAAAAAAgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAAAAAAAAAAAAAPAAAABwAAAAcAA
        AAvwAAAP8AAAD/oAAD/8AAA//kAB///IEf8=
</value>
  </data>
</root>